name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'tests/**'
      - 'scripts/**'
      - 'config/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.pre-commit-config.yaml'
      - 'Makefile'
  pull_request:
    paths:
      - 'apps/backend/**'
      - 'tests/**'
      - 'scripts/**'
      - 'config/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.pre-commit-config.yaml'
      - 'Makefile'

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U app" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Ensure legacy directory is empty
        run: scripts/check_no_legacy_files.sh
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pre-commit pip-audit
      - name: Audit Python dependencies
        run: |
          pip-audit -r requirements.txt -f json > pip-audit.json || true
      - name: Upload pip audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json
      - name: Fail on critical Python vulnerabilities
        run: python scripts/check_pip_audit.py pip-audit.json
      - name: Run Ruff (check only)
        run: pre-commit run ruff --all-files --hook-stage manual
      - name: Run Black (check only)
        run: pre-commit run black --all-files --hook-stage manual
      - name: Verify router map
        run: python scripts/check_router_map.py
      - name: Run tests
        env:
          DATABASE__HOST: localhost
          DATABASE__PORT: 5432
          DATABASE__NAME: app
          DATABASE__USERNAME: app
          DATABASE__PASSWORD: postgres
          REDIS_URL: redis://localhost:6379/0
        run: pytest -q
      - name: Build Docker image
        run: docker build -f apps/backend/Dockerfile .
