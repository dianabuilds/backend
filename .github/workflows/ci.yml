name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      CI_DB_PASSWORD: postgres
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: ${{ env.CI_DB_PASSWORD }}
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U app" --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.13'
      - name: Cache pip
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Generate database password
        run: |
          CI_DB_PASSWORD=$(openssl rand -hex 16)
          echo "CI_DB_PASSWORD=$CI_DB_PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::$CI_DB_PASSWORD"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy pytest pytest-asyncio
      - name: Setup Node
        uses: actions/setup-node@60f40a8c9d95b8d985d8b6a59f3691587561bdb3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: admin-frontend/package-lock.json
      - name: Build admin frontend
        working-directory: admin-frontend
        run: |
          npm ci
          npm run build
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U app && break
            sleep 2
          done
      - name: Create env file
        run: |
          cat <<EOT > .env
          DATABASE__HOST=localhost
          DATABASE__PORT=5432
          DATABASE__NAME=app
          DATABASE__USERNAME=app
          DATABASE__PASSWORD=$CI_DB_PASSWORD
          REDIS_URL=redis://localhost:6379/0
          JWT__SECRET=ci-secret
          SMTP_MOCK=True
          EOT
      - name: Run migrations
        run: alembic upgrade head
      - name: Ruff
        run: ruff check .
      - name: Black
        run: black --check .
      - name: Mypy
        run: mypy app
        continue-on-error: true
      - name: Pytest
        run: pytest -q --junitxml=pytest.xml
      - name: Upload pytest report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: pytest-report
          path: pytest.xml

  publish-image:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Login to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}
      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.SHORT_SHA }}
            ghcr.io/${{ github.repository }}:latest
