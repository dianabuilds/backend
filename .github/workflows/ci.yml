name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  test:
    name: Lint & Test (Python 3.13)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: app
          POSTGRES_USER: app
          POSTGRES_PASSWORD: secret
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U app -d app"
          --health-interval=5s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7
        ports: ['6379:6379']
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s --health-timeout=5s --health-retries=10

    env:
      DATABASE__HOST: localhost
      DATABASE__PORT: 5432
      DATABASE__NAME: app
      DATABASE__USERNAME: app
      DATABASE__PASSWORD: secret
      REDIS_URL: redis://localhost:6379/0
      JWT__SECRET: ci-secret
      JWT__ALGORITHM: HS256
      JWT__EXPIRES_MIN: 60
      SMTP_MOCK: "True"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy pytest pytest-asyncio

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U app && break
            sleep 2
          done

      - name: Alembic upgrade
        run: alembic upgrade head

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check . || true

      - name: Type check (mypy)
        run: mypy app || true

      - name: Tests
        env:
          PYTHONWARNINGS: default
        run: pytest -q

  publish-image:
    name: Build & Push Docker image
    needs: test
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || github.token }}

      - name: Extract meta
        id: meta
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${REPO_LOWER}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG }}
            ${{ steps.meta.outputs.IMAGE }}:latest
          build-args: |
            ENVIRONMENT=production
