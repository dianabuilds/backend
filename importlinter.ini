[importlinter]
root_package = app

[contract:outbox_facade_only]
name = Outbox provider must be used only via System facade
type = forbidden
source_modules =
    app.domains
forbidden_modules =
    app.providers.outbox
ignore_imports =
    app.domains.system.platform.outbox -> app.providers.outbox

[contract:domain_independence_pilot]
name = Pilot: domains are independent (no cross-imports)
type = independence
modules =
    app.domains.auth
    app.domains.navigation
    app.domains.nodes
    app.domains.users

[contract:auth_layers]
name = Auth layering: domain -> application -> api
type = layers
layers =
    app.domains.auth.domain
    app.domains.auth.application
    app.domains.auth.api

[contract:navigation_layers]
name = Navigation layering: domain -> application -> api
type = layers
layers =
    app.domains.navigation.domain
    app.domains.navigation.application
    app.domains.navigation.api

[contract:admin_layers]
name = Admin layering: domain -> application -> api
type = layers
layers =
    app.domains.admin.domain
    app.domains.admin.application
    app.domains.admin.api

[contract:nodes_layers]
name = Nodes layering: domain -> application -> api
type = layers
layers =
    app.domains.nodes.domain
    app.domains.nodes.application
    app.domains.nodes.api

[contract:users_layers]
name = Users layering: domain -> application -> api
type = layers
layers =
    app.domains.users.domain
    app.domains.users.application
    app.domains.users.api

[contract:payments_layers]
name = Payments layering: domain -> application -> api
type = layers
layers =
    app.domains.payments.domain
    app.domains.payments.application
    app.domains.payments.api

[contract:notifications_layers]
name = Notifications layering: domain -> application -> api
type = layers
layers =
    app.domains.notifications.domain
    app.domains.notifications.application
    app.domains.notifications.api

[contract:domain_independence_pilot_2]
name = Pilot 2: more domain independence
type = independence
modules =
    app.domains.notifications
    app.domains.payments

[contract:forbid_legacy_web_templates]
name = Forbid legacy web/templates imports
type = forbidden
source_modules =
    app
forbidden_modules =
    app.web
    app.templates

[contract:forbid_legacy_core_logging]
name = Forbid legacy core logging modules
type = forbidden
source_modules =
    app
forbidden_modules =
    app.core.log_events
    app.core.audit_log

[contract:forbid_legacy_api]
name = Forbid legacy app.api imports
type = forbidden
source_modules =
    app
forbidden_modules =
    app.api

[contract:discourage_common]
name = Discourage legacy app.common (use app.shared)
type = forbidden
source_modules =
    app
forbidden_modules =
    app.common
ignore_imports =
    # Transitional shims inside app.shared are allowed to import app.common
    app.shared.errors -> app.common.errors
    app.shared.service -> app.common.service
    app.shared.scoping -> app.common.scoping

[contract:forbid_legacy_infra]
name = Forbid legacy infra imports
type = forbidden
source_modules =
    app
forbidden_modules =
    app.infra

[contract:forbid_core_any]
name = Forbid any app.core imports
type = forbidden
source_modules =
    app
forbidden_modules =
    app.core

[contract:kernel_no_domains]
name = Kernel must not depend on domains (allowlisted bootstrap)
type = forbidden
source_modules =
    app.kernel
forbidden_modules =
    app.domains
ignore_imports =
    # bootstrap wiring and optional routers
    app.kernel.create_app -> app.domains.registry
    app.kernel.create_app -> app.domains.system.api.health
    app.kernel.create_app -> app.domains.system.api.ops
    app.kernel.create_app -> app.domains.system.events.bus
    app.kernel.create_app -> app.domains.system.events
    app.kernel.create_app -> app.domains.admin.web.admin_spa
    app.kernel.create_app -> app.domains.admin.api.override
    app.kernel.create_app -> app.domains.auth.api.routers
    app.kernel.create_app -> app.domains.telemetry.api.metrics_router
    app.kernel.create_app -> app.domains.telemetry.api.rum_metrics_router
    app.kernel.create_app -> app.domains.ai.embedding_config
    # exception handling and context
    app.kernel.exception_handlers -> app.domains.telemetry.log_filters
    app.kernel.exception_handlers -> app.domains.auth.security.exceptions
    app.kernel.middlewares.request_id -> app.domains.telemetry.log_filters

[contract:kernel_no_providers]
name = Kernel must not depend on providers (allowlisted bootstrap)
type = forbidden
source_modules =
    app.kernel
forbidden_modules =
    app.providers
ignore_imports =
    app.kernel.create_app -> app.providers
    app.kernel.middlewares.rate_limit -> app.providers.redis_utils
