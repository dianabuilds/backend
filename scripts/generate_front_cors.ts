import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
import { resolve, dirname } from "path";
import { fileURLToPath } from "url";

const __dirname = dirname(fileURLToPath(import.meta.url));
const rootDir = resolve(__dirname, "..");
const envPath = resolve(rootDir, ".env");

if (!existsSync(envPath)) {
  console.error(`Cannot find .env at ${envPath}`);
  process.exit(1);
}

const raw = readFileSync(envPath, "utf-8");
const env: Record<string, string> = {};
for (const line of raw.split(/\r?\n/)) {
  const match = line.match(/^\s*([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)\s*$/);
  if (!match) continue;
  const key = match[1];
  let value = match[2];
  if (value.startsWith("\"") && value.endsWith("\"")) value = value.slice(1, -1);
  if (value.startsWith("'") && value.endsWith("'")) value = value.slice(1, -1);
  env[key] = value;
}

const getEnv = (...keys: string[]) => {
  for (const key of keys) {
    const val = env[key];
    if (val !== undefined) return val;
  }
  return undefined;
};

const parseList = (value: string | undefined) =>
  value?.split(",").map((s) => s.trim()).filter(Boolean) ?? [];

const extractPythonList = (name: string) => {
  const settingsPath = resolve(rootDir, "apps/backend/app/core/settings.py");
  const src = readFileSync(settingsPath, "utf-8");
  const regex = new RegExp(`${name}\\s*=\\s*\\[(.*?)\\]`, "s");
  const match = src.match(regex);
  if (!match) return [] as string[];
  return match[1]
    .split(/\r?\n/)
    .map((line) => line.trim())
    .filter(Boolean)
    .map((line) => line.replace(/#.*/, ""))
    .map((line) => line.replace(/[",]/g, ""))
    .map((line) => line.trim())
    .filter(Boolean);
};

const unique = <T,>(arr: T[]) => Array.from(new Set(arr));

const defaultMethods = extractPythonList("DEFAULT_CORS_METHODS");
const defaultHeaders = extractPythonList("DEFAULT_CORS_HEADERS");

const cors = {
  allowOrigins: parseList(
    getEnv("APP_CORS_ALLOW_ORIGINS", "CORS_ALLOW_ORIGINS", "CORS_ALLOWED_ORIGINS"),
  ),
  allowCredentials: /^true$/i.test(
    getEnv("APP_CORS_ALLOW_CREDENTIALS", "CORS_ALLOW_CREDENTIALS") ?? "",
  ),
  allowMethods: unique([
    ...defaultMethods,
    ...parseList(
      getEnv("APP_CORS_ALLOW_METHODS", "CORS_ALLOW_METHODS", "CORS_ALLOWED_METHODS"),
    ),
  ]),
  allowHeaders: unique([
    ...defaultHeaders,
    ...parseList(
      getEnv("APP_CORS_ALLOW_HEADERS", "CORS_ALLOW_HEADERS", "CORS_ALLOWED_HEADERS"),
    ),
  ]),
};

const formatArray = (arr: string[]) => `[${arr.map((v) => JSON.stringify(v)).join(", ")}]`;

const outDir = resolve(rootDir, "apps/admin/src/config");
mkdirSync(outDir, { recursive: true });
const outPath = resolve(outDir, "cors.generated.ts");

const content = `// This file is auto-generated by scripts/generate_front_cors.ts\n` +
  `export const corsConfig = {\n` +
  `  allowOrigins: ${formatArray(cors.allowOrigins)},\n` +
  `  allowCredentials: ${cors.allowCredentials},\n` +
  `  allowMethods: ${formatArray(cors.allowMethods)},\n` +
  `  allowHeaders: ${formatArray(cors.allowHeaders)},\n` +
  `} as const;\n`;

writeFileSync(outPath, content);
console.log(`CORS config generated at ${outPath}`);
