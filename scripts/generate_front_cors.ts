import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
import { resolve, dirname } from "path";
import { fileURLToPath } from "url";

const __dirname = dirname(fileURLToPath(import.meta.url));
const rootDir = resolve(__dirname, "..");
const envPath = resolve(rootDir, ".env");

if (!existsSync(envPath)) {
  console.error(`Cannot find .env at ${envPath}`);
  process.exit(1);
}

const raw = readFileSync(envPath, "utf-8");
const env: Record<string, string> = {};
for (const line of raw.split(/\r?\n/)) {
  const match = line.match(/^\s*([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)\s*$/);
  if (!match) continue;
  const key = match[1];
  let value = match[2];
  if (value.startsWith("\"") && value.endsWith("\"")) value = value.slice(1, -1);
  if (value.startsWith("'") && value.endsWith("'")) value = value.slice(1, -1);
  env[key] = value;
}

const cors = {
  allowOrigins: env.APP_CORS_ALLOW_ORIGINS?.split(",").map((s) => s.trim()).filter(Boolean) ?? [],
  allowCredentials: /^true$/i.test(env.APP_CORS_ALLOW_CREDENTIALS ?? ""),
  allowMethods: env.APP_CORS_ALLOW_METHODS?.split(",").map((s) => s.trim()).filter(Boolean) ?? [],
  allowHeaders: env.APP_CORS_ALLOW_HEADERS?.split(",").map((s) => s.trim()).filter(Boolean) ?? [],
};

const formatArray = (arr: string[]) => `[${arr.map((v) => JSON.stringify(v)).join(", ")}]`;

const outDir = resolve(rootDir, "apps/admin/src/config");
mkdirSync(outDir, { recursive: true });
const outPath = resolve(outDir, "cors.generated.ts");

const content = `// This file is auto-generated by scripts/generate_front_cors.ts\n` +
  `export const corsConfig = {\n` +
  `  allowOrigins: ${formatArray(cors.allowOrigins)},\n` +
  `  allowCredentials: ${cors.allowCredentials},\n` +
  `  allowMethods: ${formatArray(cors.allowMethods)},\n` +
  `  allowHeaders: ${formatArray(cors.allowHeaders)},\n` +
  `} as const;\n`;

writeFileSync(outPath, content);
console.log(`CORS config generated at ${outPath}`);
