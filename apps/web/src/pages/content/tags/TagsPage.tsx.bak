import React from 'react';
import { ContentLayout } from '../ContentLayout';
import { Card, Input, Select } from '../../../shared/ui';
import { apiGet } from '../../../shared/api/client';

type Tag = { id: string; slug?: string; name: string; usage_count?: number; aliases_count?: number; created_at?: string };

export default function TagsPage() {
  const [items, setItems] = React.useState<Tag[]>([]);
  const [q, setQ] = React.useState('');
  const [type, setType] = React.useState<'all' | 'node' | 'quest'>('all');
  const [page, setPage] = React.useState(1);
  const [pageSize, setPageSize] = React.useState(20);
  const [hasNext, setHasNext] = React.useState(false);
  const [loading, setLoading] = React.useState(false);

  async function load() {
    setLoading(true);
    try {
      const offset = (page - 1) * pageSize;
      const url = `/v1/admin/tags/list?q=${encodeURIComponent(q)}&limit=${pageSize}&offset=${offset}&type_=${type}`;
      const data = await apiGet(url);
      if (Array.isArray(data)) {
        setItems(data);
        setHasNext(data.length === pageSize);
      } else {
        setItems([]);
        setHasNext(false);
      }
    } catch {
      setItems([]);
      setHasNext(false);
    } finally {
      setLoading(false);
    }
  }

  React.useEffect(() => {
    const t = setTimeout(load, 200);
    return () => clearTimeout(t);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [q, type, page, pageSize]);

  const totalPages = page + (hasNext ? 1 : 0);

  return (
    <ContentLayout>
      <Card className="p-4">
        <div className="flex items-center justify-between gap-3">
          <div className="flex items-center gap-3 text-sm text-gray-500">
            <span>Всего на странице: {items.length}</span>
            <Select value={String(pageSize)} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }} className="h-8 w-24 text-xs">
              {[10,20,30,40,50,100].map((n) => (<option key={n} value={n}>{n}/стр</option>))}
            </Select>
            <Select value={type} onChange={(e) => { setType(e.target.value as any); setPage(1); }} className="h-8 w-28 text-xs">
              <option value="all">Все типы</option>
              <option value="node">Ноды</option>
              <option value="quest">Квесты</option>
            </Select>
          </div>
          <div className="w-72"><Input placeholder="Поиск тегов" value={q} onChange={(e) => { setPage(1); setQ(e.target.value); }} /></div>
        </div>
        <div className="mt-4 overflow-x-auto">
          <table className="table is-hoverable is-zebra min-w-[720px]">
            <thead>
              <tr>
                <th className="text-left">ID</th>
                <th className="text-left">Slug</th>
                <th className="text-left">Тег</th>
                <th className="text-left">Использований</th>
                <th className="text-left">Алиасы</th>
                <th className="text-left">Создан</th>
              </tr>
            </thead>
            <tbody>
              {items.map((t) => (
                <tr key={t.id}>
                  <td className="py-2 text-gray-500">{t.id}</td>
                  <td className="py-2">{t.slug}</td>
                  <td className="py-2 font-medium text-gray-800 dark:text-dark-100">#{t.name}</td>
                  <td className="py-2">{t.usage_count ?? 0}</td>
                  <td className="py-2">{t.aliases_count ?? 0}</td>
                  <td className="py-2">{t.created_at ? String(t.created_at).slice(0, 10) : ''}</td>
                </tr>
              ))}
              {!loading && items.length === 0 && (
                <tr>
                  <td colSpan={6} className="py-10 text-center text-sm text-gray-500">Ничего не найдено</td>
                </tr>
              )}
              {loading && (
                <tr>
                  <td colSpan={6} className="py-10 text-center text-sm text-gray-500">Загрузка…</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
        <div className="mt-4 flex items-center justify-end gap-2 text-sm">
          <button
            className="btn-base btn text-gray-900 bg-gray-150 hover:bg-gray-200 disabled:opacity-60"
            disabled={page <= 1}
            onClick={() => setPage((p) => Math.max(1, p - 1))}
          >
            Назад
          </button>
          <span className="px-2">Стр. {page}</span>
          <button
            className="btn-base btn text-gray-900 bg-gray-150 hover:bg-gray-200 disabled:opacity-60"
            disabled={!hasNext}
            onClick={() => setPage((p) => p + 1)}
          >
            Вперёд
          </button>
        </div>
      </Card>
    </ContentLayout>
  );
}

