from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Protocol

from domains.platform.billing.domain.models import Plan, Subscription


@dataclass
class CheckoutResult:
    url: str | None
    provider: str
    external_id: str


class PaymentProvider(Protocol):
    async def checkout(self, user_id: str, plan: Plan) -> CheckoutResult: ...
    async def verify_webhook(self, payload: bytes, signature: str | None) -> bool: ...


class PlanRepo(Protocol):
    async def list_active(self) -> list[Plan]: ...
    async def list_all(self) -> list[Plan]: ...
    async def get_by_slug(self, slug: str) -> Plan | None: ...
    async def upsert(self, p: dict[str, Any]) -> Plan: ...
    async def delete(self, plan_id: str) -> None: ...


class SubscriptionRepo(Protocol):
    async def get_active_for_user(self, user_id: str) -> Subscription | None: ...
    async def activate(
        self, user_id: str, plan_id: str, auto_renew: bool, ends_at: str | None = None
    ) -> Subscription: ...


class LedgerRepo(Protocol):
    async def add_tx(self, tx: dict[str, Any]) -> None: ...

    # Optional convenience methods for admin listings
    async def list_recent(self, limit: int = 100) -> list[dict[str, Any]]: ...


class GatewayRepo(Protocol):
    async def list(self) -> list[dict[str, Any]]: ...
    async def upsert(self, g: dict[str, Any]) -> dict[str, Any]: ...
    async def delete(self, slug: str) -> None: ...


class ContractsRepo(Protocol):
    async def list(self) -> list[dict[str, Any]]: ...
    async def upsert(self, c: dict[str, Any]) -> dict[str, Any]: ...
    async def delete(self, id_or_slug: str) -> None: ...
    async def get(self, id_or_slug: str) -> dict[str, Any] | None: ...
    async def get_by_address(self, address: str) -> dict[str, Any] | None: ...
    async def list_events(
        self, id_or_slug: str | None, limit: int = 100
    ) -> list[dict[str, Any]]: ...
    async def add_event(self, e: dict[str, Any]) -> None: ...
    async def metrics_methods(
        self, id_or_slug: str | None, window: int = 1000
    ) -> list[dict[str, Any]]: ...
    async def metrics_methods_ts(
        self, id_or_slug: str | None, days: int = 30
    ) -> list[dict[str, Any]]: ...
    async def metrics_volume_ts(
        self, id_or_slug: str | None, days: int = 30
    ) -> list[dict[str, Any]]: ...


class CryptoConfigRepo(Protocol):
    async def get(self, slug: str) -> dict[str, Any] | None: ...
    async def set(self, slug: str, cfg: dict[str, Any]) -> dict[str, Any]: ...


__all__ = [
    "PaymentProvider",
    "CheckoutResult",
    "PlanRepo",
    "SubscriptionRepo",
    "LedgerRepo",
    "GatewayRepo",
    "ContractsRepo",
    "CryptoConfigRepo",
]
