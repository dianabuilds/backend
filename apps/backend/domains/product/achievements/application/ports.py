from __future__ import annotations

from collections.abc import Iterable
from typing import Protocol, runtime_checkable

from domains.product.achievements.domain.entities import (
    Achievement,
    UserAchievement,
)


@runtime_checkable
class Repo(Protocol):
    # User views
    def list_for_user(
        self, user_id: str
    ) -> Iterable[tuple[Achievement, UserAchievement | None]]: ...
    def grant(self, user_id: str, achievement_id: str) -> bool: ...
    def revoke(self, user_id: str, achievement_id: str) -> bool: ...

    # Admin
    def list_all(self) -> list[Achievement]: ...
    def get(self, achievement_id: str) -> Achievement | None: ...
    def exists_code(self, code: str) -> bool: ...
    def create(self, data: dict) -> Achievement: ...
    def update(self, achievement_id: str, data: dict) -> Achievement | None: ...
    def delete(self, achievement_id: str) -> bool: ...
